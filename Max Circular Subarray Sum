class Solution {
public:
    int kadanesMax(vector<int>& arr, int n){
        int sum = arr[0];
        int maxSum = arr[0];
        
        for(int i=1; i<n; i++){
            sum = max(sum + arr[i], arr[i]);
            maxSum = max(maxSum, sum);
        }
        return maxSum;
    }
    int kadanesMin(vector<int>& arr, int n){
        int sum = arr[0];
        int minSum = arr[0];
        
        for(int i=1; i<n; i++){
            sum = min(sum + arr[i], arr[i]);
            minSum = min(minSum, sum);
        }
        return minSum;
    }
    int maxSubarraySumCircular(vector<int>& nums) {
        int n = nums.size();
        
        int sum = accumulate(begin(nums), end(nums), 0);
        
        int minSum = kadanesMin(nums,n);
        
        int maxSum = kadanesMax(nums,n);
        
        int circular_sum = sum - minSum;
        
        if(maxSum > 0){
            return max(maxSum, circular_sum);
        }
        return maxSum;
    }
};
